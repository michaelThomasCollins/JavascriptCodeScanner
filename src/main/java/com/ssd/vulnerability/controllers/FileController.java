package com.ssd.vulnerability.controllers;

import com.ssd.vulnerability.exception.FileStorageException;
import com.ssd.vulnerability.payload.UploadFileResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import java.util.HashMap;
import java.util.Scanner;

@RestController
public class FileController {

    private static final Logger logger = LoggerFactory.getLogger(FileController.class);

    @PostMapping("/uploadFile")
    public UploadFileResponse uploadFile(@RequestParam("file") String file, @RequestParam("name") String name) {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        String userName = authentication.getName();
        logger.info("User: " + userName + "Uploading File: " + name);
        // Normalize file name
        String fileName = StringUtils.cleanPath(name);

        //Check for errors
        Scanner scan = new Scanner(file);
        int counter = 0;
        HashMap<Integer, String> errors = new HashMap<>();
        while (scan.hasNextLine() ){
            counter++;
            String oneLine = scan.nextLine();
            if(oneLine.contains(" eval(")){
                errors.put(counter,"eval method executes javascript code from text, this may contain malicious code ");
            }
            if(oneLine.contains(" == ") || oneLine.contains(" != ")){
                errors.put(counter,"Should not use type-cast comparison operators, May Cause unexpected Type Coercion ");
            }
            if(oneLine.contains(",}") || oneLine.contains(",]")){
                errors.put(counter,"Trailing Commas should be avoided");
            }
            if(oneLine.contains(".toSource(")){
                errors.put(counter,"toSource is not supported in Internet Explorer");
            }
        }

        // Check if the file's name contains invalid characters
        if (fileName.contains("..")) {
            throw new FileStorageException("Sorry! Filename contains invalid path sequence " + fileName);
        }

        logger.info("Upload " + fileName + " by " + userName + " Successful!");

        return new UploadFileResponse(fileName, errors);
    }
}
